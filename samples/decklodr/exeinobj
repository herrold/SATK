#!/bin/sh
# Copyright (C) 2012 Harold Grovesteen
#
# This file is part of SATK.
#
#     SATK is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     SATK is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with SATK.  If not, see <http://www.gnu.org/licenses/>.

# This bash script will create card decks that use Object Modules for program
# loading rather than an IPL ELF.  It depends upon a boot loader that is itself
# based upon an IPL ELF.  This boot loader deck is found in the samples/textseg
# directory built from the decklodr.S program.
#
# The boot loader deck used is: 
#     samples/textseg/card/<arch>/decklodr.3525
#
# The bash script samples/textseg/decklodr is used to create the decklodr.3525
# card reader device IPL deck.
#
# This script provides support for creation of an Object Module containing an
# IPL ELF as its START control section's content.  The Object Module resulting
# from the exeinobj.py can be added to the boot loader deck.  The
#
# The source IPL ELF embedded within the object module is the "Hello World"
# executable:
#     samples/external/card/<arch>/extrnal
#
# The decklodr boot loader has the advantage of being able to load into storage
# multiple object decks.  The first object module that contains a START section
# will be the program entered by the deck loader boot program.

usage()
{   echo "Usage:"
    echo "    ./exeinobj help                          Produce help information"
    echo "    ./exeinobj <dev> <arch> ipldev [dryrun]  Build a deck for S/370 IPL"
    echo ""
    echo "where <dev> is 'card'"
    echo "where <arch> is 's370'"
}

SATK_DIR=${HOME}/SATK
SAMPLE_DIR=${SATK_DIR}/samples/decklodr

# Bring in the iml function for launching Hercules
source ${SATK_DIR}/samples/imlfun

TOOLS=${SATK_DIR}/tools
IPLTOOLS=${TOOLS}/ipl
EXEINOBJ=${IPLTOOLS}/exeinobj.py

PYTHONPATH=${IPLTOOLS}
PYTHONPATH=${PYTHONPATH}:${TOOLS}/
PYTHONPATH=${PYTHONPATH}:${TOOLS}/argparse-1.1
export PYTHONPATH

# The 
DECK_DIR=${SAMPLE_DIR}/${1}
# This is for the boot loader

gas="2.21"

# Set the Hercules environment
herc_env svn
env="svn"

datetime()
{
	sfx=$(date +%Y%m%d.%H%M%S)
}

#  +------------------------------------------------------------+
#  |                                                            | 
#  |        Set the device option for all architectures         |
#  |                                                            |
#  +------------------------------------------------------------+

# Usage: device_type

device()
{    
    case $1 in
        #"fba")   med_env model 3310    # FBA Device
        #         export IPLTYPE="3310"       # export so Hercules can use it
        #         SAMPLE=${SAMPLE_DIR}/fba
        #         DTYPE="fba"
        #         ;;
        #"ckd")   mod_env model 3380    # CKD Device
        #         export IPLTYPE="3380"       # export so Hercules can use it
        #         SAMPLE=${SAMPLE_DIR}/ckd
        #         DTYPE="ckd"
        #         ;;
        #"tape")  mod_env model 3410    # Tape Device
        #         export IPLTYPE="3410"       # export so Hercules can use it
        #         SAMPLE=${SAMPLE_DIR}/tape
        #         DTYPE="tape"
        #         ;;
        "card")  #med_env model 3505     # Card Reader Device
                 export IPLTYPE="3505"       # export so Hercules can use it
                 SAMPLE=${SAMPLE_DIR}/card
                 DTYPE="card"
                 BOOTLODR_DIR=${SATK_DIR}/samples/textseg/card
                 ELF_DIR=${SATK_DIR}/samples/external/card
                 ;;
        #"CDROM") mod_env model CDROM   # CDROM
        #         export IPLTYPE="CDROM"      # export so Hercules can use it
        #         SAMPLE=${SAMPLE_DIR}/cdrom
        #         DTYPE="cdrom"
        #         ;;
        *) echo "exeinobj: Error: Unrecognized IPL device type: $1"
    esac
}

#  +------------------------------------------------------------+
#  |                                                            | 
#  |       Set the linker options for all architectures         |
#  |                                                            |
#  +------------------------------------------------------------+

linker_options()
{
 # Specify the load point of the IPL ELF executable
    med_env load default      # Load point at absolute 0x2000
    #med_env load xxxx         # Set a different hexadecimal load address

 # Specify the assembly symbol that marks the entry point of the ELF
    med_env entry default     # Use the '_start' symbol as the entry point
    #med_env entry asymbol     # Specify another symbol as the entry point
    
 # Specify whether relocation information should be preserved in the ELF executable
   med_env reloc enable       # Retain relocation information in ELF executable
   #med_env reloc disable      # Strip relocation information from ELF executable
   
 # Specify whether to generate linker debugging information
    #med_env debug enable  # Enable debug output
    med_env debug disable # Disable debug output
}


#  +------------------------------------------------------------+
#  |                                                            | 
#  |   Set the IPL device media options for all architectures   |
#  |                                                            |
#  +------------------------------------------------------------+

# Usage: ipldev_options external_loader_path
ipldev_options()
{
 # Specify how big to make the emulated IPL DASD device medium
    med_env trunc enable   # Make as small as possible
    #med_env trunc disable  # Make the medium full size

 # Specify if media should be sized to make it compression eligible
    med_env compress ineligible   # Media not sized to allow compression
    #med_env compress eligible     # Media sized to allow comprssion

 # Specify whether to generate IPL device debugging file
    med_env debug enable  # Enable debug output
    #med_env debug disable # Disable debug output

 # Set whether to IPL the entire IPL ELF executable or just the TEXT segment
    #med_env bootelf force     # IPL the entire ELF executable
    med_env bootelf noforce   # IPL only the IPL ELF executable's TEXT segment

 # Set whether to include a LOWC segment
    med_env lowc allow        # Generate a default LOWC segment if not present
    #med_enV lowc suppress     # Suppress the LOWC segment even if present

 # Specify whether an embedded loader is allowed
    #med_env loader allow      # Utilize an embedded boot loader if present
    med_env loader suppress   # Do not use an embedded boot loader even if present

 # Specify whether to use an external embedded boot loader and its IPL ELF executable
    med_env external disable  # Do not include an external embedded boot loader
    #med_env external ${1}     # Include this executable's embedded boot loader
}

case ${1} in
   "help") usage ; exit 0 ;;
esac

# Initialize the device
device ${1}


 # Initialize the architecture in use
case $2 in
    "s370bc")
        ARCHDIR=${SAMPLE_DIR}/s370bc    # Architecture directory
        BOOT=${BOOTLODR_DIR}/s370bc/decklodr.3505
        ELF=${ELF_DIR}/s370bc/extrnal
        #med_env arch s370bc         # Causes psw's to be S/370 Bc-mode
        #med_env arch implied        # Use IPL ELF implied architecture
        #med_env init
        #med_env s370bc enable       # Causes IPL PSW's to use S/370 BC-mode
        rc=${ARCHDIR}/s370bc.rc
        conf=${ARCHDIR}/s370bc.conf
        ELFARCH="s370"
        ;;
    "s370")   
        ARCHDIR=${SAMPLE_DIR}/s370
        BOOT=${BOOTLODR_DIR}/s370/decklodr.3505
        ELF=${ELF_DIR}/s370/extrnal
        #med_env arch s370
        #med_env arch implied        # Used IPL ELF implied architecture
        #med_env init
        rc=${ARCHDIR}/s370.rc
        conf=${ARCHDIR}/s370.conf
        ELFARCH="s370"
        ;;
    "s390")   
        ARCHDIR=${SAMPLE_DIR}/s390
        BOOT=${BOOTLODR_DIR}/s390/decklodr.3505
        DECK=${DECK_DIR}/s390/extrnal
        ELF=${ELF_DIR}/s390/extrnal
        #med_env arch s390
        #med_env arch implied        # Used IPL ELF implied architecture
        #med_env init
        rc=${ARCHDIR}/s390.rc
        conf=${ARCHDIR}/s390.conf
        ELFARCH="s390"
        ;;
    "s390x")  
        ARCHDIR=${SAMPLE_DIR}/s390x
        BOOT=${BOOTLODR_DIR}/s390x/decklodr.3505
        DECK=${DECK_DIR}/s390x/extrnal
        ELF=${ELF_DIR}/s390x/extrnal
        #med_env arch z
        #med_env arch implied        # Use IPL ELF implied architecture
        #med_env init
        rc=${ARCHDIR}/s390x.rc
        conf=${ARCHDIR}/s390x.conf
        ELFARCH="s390x"
        ;;
    *)
        echo "exeinobj: Error: invalid architecture: $2"
        exit 1
esac

# Create log file path
datetime
log="${ARCHDIR}/hercules.${env}.${sfx}.log"

case $3 in
    #as)      ipl_elf assemble default ;;
    #dumpall) ipl_elf dump all default ;;
    #exedump) ipl_elf dump exe default ;;
    ipl)
        export IPLDEV=${ARCHDIR}/ipldeck.${IPLTYPE}   # IPL device
        iml -h $hercules -c $conf -r $rc -l $log
        ;;
    ipldev)
        if [ "${4}" == "dryrun" ]
        then
            DRYRUN="--dryrun"
        else
            DRYRUN=""
        fi
        DECK=${ARCHDIR}/ipldeck.${IPLTYPE}
        DEBUG=${ARCHDIR}/ipldeck.${IPLTYPE}.debug.txt
        ${EXEINOBJ} --debug ${DRYRUN} --boot=${BOOT} --deck=${DECK} \
               --seq=IPL --binutils=${gas} ${ELF} > ${DEBUG}
        ;;
    #ld)  linker_options
    #     ipl_elf link default
    #     if [ "${ELFARCH}" = "s370" ]
    #     then
    #         ipl_elf s370 default
    #     fi
    #     ;;
    #objdump) ipl_elf dump obj default ;;
    rmlogs) cd ${ARCHDIR} && \
            rm *.log 
            ;;
    help) ${IPLTOOLS}/exeinobj.py --help ;;
    *)
	     echo "exeinobj: Error: unavailable option: $3"
	     usage
	     exit 1
esac