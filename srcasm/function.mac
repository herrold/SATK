* Copyright (C) 2015 Harold Grovesteen
*
* This file is part of SATK.
*
*     SATK is free software: you can redistribute it and/or modify
*     it under the terms of the GNU General Public License as published by
*     the Free Software Foundation, either version 3 of the License, or
*     (at your option) any later version.
*
*     SATK is distributed in the hope that it will be useful,
*     but WITHOUT ANY WARRANTY; without even the implied warranty of
*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with SATK.  If not, see <http://www.gnu.org/licenses/>.

* This module provides macros for the creation of callable functions, their use
* and required environment.
*
* The macros are modeled after the Executable and Linking Format (ELF) Application
* Binary Interface (ABI) for s390 processors.  The ABI is intrinsically part of the
* ELF standard.  Presently, ASMA does not support the ELF standard by creating ELF
* object file format output.
*
* Macros:
*    ALLOC     Dynamically allocates stack frame area. - PLANNED
*    CALL      Call a function based upon an in-line location
*    CALLR     Call a function using a pre-loaded or loaded address constant
*    FRAME     The foundation of all function stack frames
*    FUNCTION  Define a function
*    LOCAL     Defines local stack frame usage by the following function
*    RETURN    Return to the caller of the function
*    STACK     Assemble a symbol representing the bottom of the stack
*    STKINIT   Initialize the stack from a value in a register or an assembled symbol
*
* Multi-architecture function assists
*    ACALL     Call an architecture specific function defined by AFUN
*    AFUN      Defines an architecture specific function
*    ICALL     Call an input/output architecture specific function defined by IFUN
*    IFUN      Defines a function supporting multiple input/output architecture
*    SCALL     Call a multi architecture sharable function defined by SFUN
*    SFUN      Defines a function sharable by multiple architectures
*
* Register convenctions used with SATK functions:
*  Register on Entry:
*    R0      = unpredictable
*    R1      = unpredictable
*    R2-R6   = non-floating point function parameters
*    R7-R12  = Unpredictable
*    R13     = Calling function's base register
*    R14     = Calling function's return location
*    R15     = Caller's stack frame pointer
*    F0,F2,F4,F6     = Parameters passed to function (FP=YES only)
*    F1,F3,F5,F7-F15 = Unpredictable (AFP=YES and FP=YES)
*    A0-A15  = unpredictable
* 
*  Registers available for function usage
*    R0-R12  = available
*    R13     = reserved for functions base register (set by function macro)
*    R14     = available between function calls, volatile across calls
*              (used by CALL or CALLR macros)
*    R15     = reserved for function's stack frame (set by pushx macro)
*    F0-F15  = available
*    A0-A15  = available
* 
*  Registers on Exit:
*    R0,R1   = unpredictable
*    R2      = Returned value (if a non-floating point value is returned),
*              otherwise unpredictable
*    R3-R5   = unpredictable
*   returnx macro restores caller's R6-R15 and optionally F8-F15
*    R6-R12  = Calling function's original register content
*    R13     = Calling function's base register
*    R14     = Calling function's return location
*    R15     = Calling function's stack frame pointer
*    F0      = floating point return value (if return is a floating point value),
*              otherwise unpredictable
*    F2      = unpredictable
*    F4      = Calling function's original register contents (FP=YES only)
*    F6      = Calling function's orignial register contents (FP=YES only)
*    F1,F3,F5,F7  = unpredictable
*    F8-F15  = Calling function's original register contents (AFP=YES only)
*    A0-A15  = unpredictable

.* To be developed
.*         MACRO
.* &LABEL   ALLOC
.*         MEND

         MACRO
&LABEL   CALL  &FUNC,&INLINE=,&RELO=NO
.* Calls a function using an in-line location.  The in-line location may be
.* an address constant or a relative location.
.* Required Parameter Usage:
.*    &FUNC     Specifies the location of the function being called.
.* Optional Parameter Usage:
.*    &LABEL    The label location associated with the function call
.*    &INLINE   Specifies the type of in-line mechanism used for the function's
.*              location.
.*                 'A'   Forces use of an aligned address constant based upon the 
.*                       current architecture level.
.*                 'J'   Forces use of a position relative long address
.*              If ommitted, the current architecture level will dictate the selection.
.*                 Level   In-line mechanism implied
.*                  0-7       'A'
.*                  8,9       'J'
.*              When a forced option is used, the generated instructions must be
.*              consistent with the run-time architecture in use.
.*    &RELO     When an address constant is used to locate the called function, 
.*              Specifies whether self-relocation is required.  Specify 'YES' for
.*              self-relocation to be used.  Defaults to 'NO'.  The current
.*              relocation environment will control the type of address constant
.*              used for self relocation.
.* Dependencies:
.* Depends on ARCHIND symbols and operator synonyms.
.* If self-relocation is used, this macro depends upon 'selfrelo.mac'.
         GBLA  &ARCHLVL
.* Symbols provided by the ARCHIND macro
         GBLA  &ARCHASZ   Size of an address constant in bytes
         GBLC  &ARCHATP   Address constant type
         GBLC  &ARCHITP   Integer constant type
.*         LCLC  &LAR   LOAD ADDRESS RELATIVE type instruction
         LCLC  &LBL   Generated label
         LCLC  &NLINE In-line option in use
         AIF   ('&FUNC' NE '').GOODFUN
         MNOTE 1,'CALL - REQUIRED FIRST POSITIONAL PARAMETER MISSING - FUNC'
         MEXIT
.GOODFUN ANOP
         AIF   ('&INLINE' EQ '').DEFNLIN
         AIF   ('&INLINE' EQ 'A').FRCA
         AIF   ('&INLINE' EQ 'J').FRCJ
         MNOTE 1,'CALL - UNRECOGNIZED KEYWORD INLINE PARAMETER - &INLINE'
         MEXIT
.DEFNLIN ANOP
&NLINE   SETC  '&ARCHATP'
         AIF   (&ARCHLVL GE 8).FRCJ
.* Inline address constant is the default
.FRCA    ANOP
&NLINE   SETC  'A'
         AGO   .GENCALL
.* Inline LOAD ADDRESS RELATIVE
.FRCJ    ANOP
&NLINE   SETC  'J'
.* Generate the function call
.GENCALL ANOP
         AIF   ('&LABEL' EQ '').NOLBL
&LABEL   DS    0H
.NOLBL   ANOP
         AIF   ('&NLINE' NE 'A').JADD
.USECON  ANOP
         $L    1,CALL&SYSNDX
         $B    CALL&SYSNDX+&ARCHASZ
&LBL     SETC  'CALL&SYSNDX'
         AIF   ('&RELO' EQ 'YES').DORELO
&LBL     DC    &ARCHATP.(&FUNC)
         AGO   .CALLIT
.DORELO  ANOP
&LBL     RELOA &FUNC
         AGO   .CALLIT
.JADD    ANOP
         LARL  1,&FUNC
.CALLIT  ANOP
         $BASR 14,1
.DONE    MEND

         MACRO
&LABEL   CALLR &REG
.* Calls a function based upon an address.
.* Parameter Usage:
.*    &LABEL The label associated with this CALLR macro.
.*    &REG   The register containing the function address enclosed in parenthesis or
.*           the address constant identifying the function being called.  If ommitted
.*           R1 is assumed to already contain the address of the function being
.*           called.
         GBLA  &ARCHLVL
         LCLA  &REGSUB  Number of register sub-parameters
         LCLB  &FETCH Whether a function is being fetched from storage
         LCLB  &LOADR Whether the function address is in a register
         LCLC  &R     Register holding the address (defaults to 1)
.* Dependendy:
.* Depends upon the ARCHIND operator synonyms.
.* Analyze the option
         AIF   ('&REG' EQ '').CALLIT
&REGSUB  SETA  N'&REG
         AIF   (&REGSUB EQ 0).NEEDFCH
         AIF   (&REGSUB EQ 1).USEREG
         MNOTE 1,'CALLR - TOO MANY FIRST POSITIONAL SUBPARAMETERS - &REGSUB'
         MEXIT
.NEEDFCH ANOP
&R       SETC  '1'
&FETCH   SETB  1
         AGO   .GEN
.USEREG  ANOP
&R       SETC  '&REG(1)'
&LOADR   SETB  1
.* Generate the Register Call
.GEN     ANOP
.NOREG   ANOP
         AIF   (NOT &FETCH).NOFETCH
         $L    1,&REG       Locate the function
         AGO   .CALLIT
.NOFETCH ANOP
         AIF   (NOT &LOADR).CALLIT
         $LR   1,&R         Locate the function
.CALLIT  ANOP
         $BASR 14,1         Call the function
         MEND

         MACRO
         FRAME &PACK=NO,&FP=NO,&AFP=NO,&BACKPTR=NO,&PRINT=
.* Defines the standard frame size and format used by all functions.  The options
.* selected here dictate what registers can be saved and preserved during function
.* calls.  If fields are not available in the STKF or STKG DSECT the corresponding
.* register can not be saved nor preserved.  Within the set of available options
.* established by this macro, a specific function may save or preserve for its
.* calling function those registers it uses.
.* 
.* Because the stack frame is universal for the assembly, the options selected here
.* wil influence the size of the stack frame and the number of function calls
.* supported by a stack of a given size.  The smallest stack frame results from
.* PACK=YES with all other options defaulting to NO.  The largest stack frame
.* results from PACK=NO and all other options specified as YES.
.*
.* The stack frame structure will ensure that the stack frame is always doublword
.* aligned (provided the stack itself is established on a doublword boundary).
.*
.* Parameter Usage:
.*    &PACK   Specify 'YES' to only allow room for only preserved registers.  Volatile
.*            registers, other than the caller's return location, can not be saved in
.*            the frame.  Specify 'NO' to save all most registers
.*            registers.  Default is 'NO'
.*    &FP     Specify 'YES' to allow the floating point registers to be saved.
.*            If PACK=YES, only preserved floating point registers can be saved.
.*            If PACK=NO, floating point registers 0, 2, 4, and 6 can be saved.
.*            Specify 'NO' to disallow saving of floating point registers.  Default
.*            is 'NO'.
.*    &AFP    If the architecture level supports the additional twelve floating point
.*            registers and FP='YES', the additional floating point registers can
.*            be saved.  If PACK=YES, only the preserved additional floating point
.*            registers can be saved.  If PACK=NO, all additional floating point
.*            registers can be saved.  Default is 'NO'.
.*   &BACKPTR Specify 'YES' to allow back pointer to be saved.  Default is 'NO'.
.*   &PRINT   Controls how the current PRINT setting is managed.  Specify 'ON' to
.*            save the current settings and set PRINT ON.  Specify 'OFF' to save the
.*            current PRINT settings and set PRINT OFF.  If the settings were saved,
.*            they are restored at the end of the FRAME definition.  Otherwise, the
.*            current PRINT settings are used without change.
.*
.* Register Handling Options Summary:
.*  UPPER CASE indicates the default register handling.  
.*
.*                 PACK=NO    PACK=YES    Restored
.*   R0,R1        NOT SAVED   not saved      NO
.*   R2-R5          SAVED     not saved      NO
.*   R6-R15         SAVED       saved        YES
.*   F0,F2,F4,F6  NOT SAVED   not saved      no      FP=NO  AFP ignored
.*   F0,F2          saved     not saved      no      FP=YES
.*   F4,F6          saved       saved        yes     FP=YES
.* * F1,F2,F3,F5  NOT SAVED   not saved      no      FP=YES,AFP=NO
.* * F7-F15       NOT SAVED   not saved      no      FP=YES,AFP=NO
.* * F0-F7          saved     not saved      no      FP=YES,AFP=YES
.* * F8-F15         saved       saved        yes     FP=YES,AFP=YES
.*   BACKPTR      NOT SAVED   not saved      no      BACKPTR=NO
.*   BACKPTR        saved       saved        no      BACKPTR=YES
.*
.* * Only if the architecture level supports additional floating point registers.
.*
         GBLA  &ARCHLVL  Current architecture level
.* Global 32-bit register frame values
         GBLA  &SATKFFN  Number of floating point register save areas
         GBLA  &SATKFRN  Number of 32-bit general register save areas
         GBLA  &SATKFSZ  Stack frame size in bytes
         GBLB  &SATKD32  Whether 32-bit register STKF DSECT has been defined
         GBLB  &SATKFBK  Whether the backpointer is available or not.
.* Global 64-bit register frame values
         GBLA  &SATKGFN  Number of floating point register save areas
         GBLA  &SATKGRN  Number of 64-bit general register save areas
         GBLA  &SATKGSZ  Stack frame size in bytes
         GBLB  &SATKD64  Whether 64-bit register STKG DSECT has been defined
         GBLB  &SATKGBK  Whether the backpointer is used or not.
.* Local frame values
         LCLA  &FPRN     Number of floating point register save areas
         LCLA  &GRN      Number of general register save areas
         LCLA  &REGSIZE  Register size in bytes
         LCLA  &BACK     Number of back pointer save areas available
.* Used to build the DSECT
         LCLB  &PAK      Whether function frame is packed
         LCLB  &AFPS     Whether additional floating point registers preserved
         LCLB  &FPS      Whether floating point registers expected to be saved
         LCLB  &BAK      Whether back pointer is expected to be saved
         LCLB  &CANAFP   Whether architecture supports additional floating point regs
         LCLB  &PRON     PRINT=ON specified
         LCLB  &PROFF    PRINT=OFF specified
         LCLC  &A        Address constant type
         LCLC  &D        FP constand type
         LCLC  &LBL      Generated label
         LCLC  &PFX      Label prefix
&CANAFP  SETB  &ARCHLVL GE 7     Set whether AFP supported
         AIF   (&ARCHLVL EQ 9).BITS64
         AIF   (&SATKD32).DONE
&REGSIZE SETA  4
&A       SETC  'A'
&D       SETC  'D'
&PFX     SETC  'STKF'
         AGO   .CKPACK
.BITS64  ANOP
         AIF   (&SATKD64).DONE
&REGSIZE SETA  8
&A       SETC  'AD'
&D       SETC  'D '
&PFX     SETC  'STKG'
.* Validate &PACK parameter
.CKPACK  ANOP
         AIF   ('&PACK' EQ '').CKFP
         AIF   ('&PACK' EQ 'NO').CKFP
         AIF   ('&PACK' EQ 'YES').SETPACK
         MNOTE 1,'FRAME - UNRECOGNIZED PACK PARAMETER - &PACK'
         MEXIT
.SETPACK ANOP
&PAK     SETB  1
.* Validate &FP parameter
.CKFP    ANOP
         AIF   ('&FP' EQ '').CKBACK
         AIF   ('&FP' EQ 'NO').CKBACK
         AIF   ('&FP' EQ 'YES').DOFP
         MNOTE 1,'FRAME - UNRECOGNIZED FP PARAMETER - &FP'
         MEXIT
.DOFP    ANOP
&FPS     SETB  1
.* Validae &AFP parameter (only if FP=YES)
.CKAFP   ANOP
         AIF   (NOT &CANAFP).CKBACK   Ignore AFP if level does not support 16 FPRs
         AIF   ('&AFP' EQ '').CKBACK
         AIF   ('&AFP' EQ 'NO').CKBACK
         AIF   ('&AFP' EQ 'YES').DOAFP
         MNOTE 1,'FRAME - UNRECOGNIZED AFP PARAMETER - &AFP'
         MEXIT
.DOAFP   ANOP
&AFPS    SETB  1
.* Validate &BACKPTR parameter
.CKBACK  ANOP
         AIF   ('&BACKPTR' EQ '').CKPR
         AIF   ('&BACKPTR' EQ 'NO').CKPR
         AIF   ('&BACKPTR' EQ 'YES').DOBACK
         MNOTE 1,'FRAME - UNRECOGNIZED BACKPTR PARAMETER - &BACKPTR'
         MEXIT
.DOBACK  ANOP
&BAK     SETB  1
.* Process &PRINT parameter
.CKPR    ANOP
&PRON    SETB  '&PRINT' EQ 'ON'
&PROFF   SETB  '&PRINT' EQ 'OFF'
         AIF   (NOT &PRON).NOON
         PUSH  PRINT
         PRINT ON
         AGO   .GENFRM
.NOON    ANOP
         AIF   (NOT &PROFF).GENFRM
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT

.* Generate the frame structure DSECT
.GENFRM  ANOP
         AIF   (&PAK).DOPACK
&PFX     DSECT
         AIF   (NOT &BAK).NOBAK
&LBL     SETC  '&PFX.BACK'
&LBL DS    &A     Backward pointer to previous frame, when used (R13)
&LBL     SETC  '&PFX.RSV '
&LBL DS    &A     reserved         - volatile  - NOT available
.NOBAK   ANOP
&LBL     SETC  '&PFX.R2  '
&LBL DS    &A     GR 2 save area   - volatile  - called parm 1 / returned value
&LBL     SETC  '&PFX.R3  '
&LBL DS    &A     GR 3 save area   - volatile  - called parm 2
&LBL     SETC  '&PFX.R4  '
&LBL DS    &A     GR 4 save area   - volatile  - called parm 3
&LBL     SETC  '&PFX.R5  '
&LBL DS    &A     GR 5 save area   - volatile  - called parm 4
&LBL     SETC  '&PFX.R6  '
&LBL DS    &A     GR 6 save area   - preserved - called parm 5
&LBL     SETC  '&PFX.R7  '
&LBL DS    &A     GR 7 save area   - preserved - available
&LBL     SETC  '&PFX.R8  '
&LBL DS    &A     GR 8 save area   - preserved - available
&LBL     SETC  '&PFX.R9  '
&LBL DS    &A     GR 9 save area   - preserved - available
&LBL     SETC  '&PFX.R10 '
&LBL DS    &A     GR 10 save area  - preserved - available
&LBL     SETC  '&PFX.R11 '
&LBL DS    &A     GR 11 save area  - preserved - available
&LBL     SETC  '&PFX.R12 '
&LBL DS    &A     GR 12 save area  - preserved - available
&LBL     SETC  '&PFX.R13 '
&LBL DS    &A     GR 13 save area  - preserved - stack frame pointer
&LBL     SETC  '&PFX.R14 '
&LBL DS    &A     GR 14 save area  - preserved - caller's return
&LBL     SETC  '&PFX.R15 '
&LBL DS    &A     GR 15 save area  - preserved - function base register
&LBL     SETC  '&PFX.F0  '
&LBL DS    &D     FPR 0 save area  - volatile  - float parm 1 /returned float value
&LBL     SETC  '&PFX.F2  '
&LBL DS    &D     FPR 2 save area  - volatile  - float parm 2
&LBL     SETC  '&PFX.F4  '
&LBL DS    &D     FPR 4 save area  - preserved - float parm 3
&LBL     SETC  '&PFX.F6  '
&LBL DS    &D     FPR 6 save area  - preserved - float parm 4
&FPRN    SETA  4
&GRN     SETA  14
&BACK    SETA  2
         AIF   (NOT &AFPS).LOCAL
&LBL     SETC  '&PFX.F1  '
&LBL DS    &D     FPR 1 save area  - volatile  - available
&LBL     SETC  '&PFX.F3  '
&LBL DS    &D     FPR 3 save area  - volatile  - available
&LBL     SETC  '&PFX.F5  '
&LBL DS    &D     FPR 5 save area  - volatile  - available
&LBL     SETC  '&PFX.F7  '
&LBL DS    &D     FPR 7 save area  - volatile  - available
&LBL     SETC  '&PFX.F8  '
&LBL DS    &D     FPR 8 save area  - preserved - available
&LBL     SETC  '&PFX.F9  '
&LBL DS    &D     FPR 9 save area  - preserved - available
&LBL     SETC  '&PFX.F10 '
&LBL DS    &D     FPR 10 save area - preserved - available
&LBL     SETC  '&PFX.F11 '
&LBL DS    &D     FPR 11 save area - preserved - available
&LBL     SETC  '&PFX.F12 '
&LBL DS    &D     FPR 12 save area - preserved - available
&LBL     SETC  '&PFX.F13 '
&LBL DS    &D     FPR 13 save area - preserved - available
&LBL     SETC  '&PFX.F14 '
&LBL DS    &D     FPR 14 save area - preserved - available
&LBL     SETC  '&PFX.F15 '
&LBL DS    &D     FPR 15 save area - preserved - available
&FPRN    SETA  &FPRN+12
         AGO   .LOCAL
.DOPACK  ANOP
&PFX     DSECT
&LBL     SETC  '&PFX.R6  '
&LBL DS    &A     GR 6 save area   - preserved - available
&LBL     SETC  '&PFX.R7  '
&LBL DS    &A     GR 7 save area   - preserved - available
&LBL     SETC  '&PFX.R8  '
&LBL DS    &A     GR 8 save area   - preserved - available
&LBL     SETC  '&PFX.R9  '
&LBL DS    &A     GR 9 save area   - preserved - available
&LBL     SETC  '&PFX.R10 '
&LBL DS    &A     GR 10 save area  - preserved - available
&LBL     SETC  '&PFX.R11 '
&LBL DS    &A     GR 11 save area  - preserved - available
&LBL     SETC  '&PFX.R12 '
&LBL DS    &A     GR 12 save area  - preserved - available
&LBL     SETC  '&PFX.R13 '
&LBL DS    &A     GR 13 save area  - preserved - stack frame pointer
&LBL     SETC  '&PFX.R14 '
&LBL DS    &A     GR 14 save area  - preserved - caller's return
&LBL     SETC  '&PFX.R15 '
&LBL DS    &A     GR 15 save area  - preserved - function base register
&GRN     SETA  10
         AIF   (NOT &FPS).NOFP
&LBL     SETC  '&PFX.F4  '
&LBL DS    &D     FPR 4 save area  - preserved - available
&LBL     SETC  '&PFX.F6  '
&LBL DS    &D     FPR 6 save area  - preserved - available
&FPRN    SETA  2
         AIF   (NOT &AFPS).NOFP
&LBL     SETC  '&PFX.F8  '
&LBL DS    &D     FPR 8 save area  - preserved - available
&LBL     SETC  '&PFX.F9  '
&LBL DS    &D     FPR 9 save area  - preserved - available
&LBL     SETC  '&PFX.F10 '
&LBL DS    &D     FPR 10 save area - preserved - available
&LBL     SETC  '&PFX.F11 '
&LBL DS    &D     FPR 11 save area - preserved - available
&LBL     SETC  '&PFX.F12 '
&LBL DS    &D     FPR 12 save area - preserved - available
&LBL     SETC  '&PFX.F13 '
&LBL DS    &D     FPR 13 save area - preserved - available
&LBL     SETC  '&PFX.F14 '
&LBL DS    &D     FPR 14 save area - preserved - available
&LBL     SETC  '&PFX.F15 '
&LBL DS    &D     FPR 15 save area - preserved - available
&FPRN    SETA  &FPRN+8
.NOFP    ANOP
         AIF   (NOT &BAK).LOCAL
&LBL     SETC  '&PFX.BACK'
&LBL DS    &A     Backward pointer to previous frame, when used
&BACK    SETA  1
         AIF   (&REGSIZE NE 4).LOCAL
         DS    &A    Maintain stack on double word boundary
&BACK    SETA  &BACK+1
.LOCAL   ANOP
&LBL     SETC  '&PFX.LCL '
&LBL EQU   *
         AIF   (&ARCHLVL EQ 9).SET64
&SATKFRN SETA  &GRN
&SATKFFN SETA  &FPRN
&SATKFBK SETB  &BACK EQ 2
&SATKFSZ SETA  ((&GRN+&BACK)*4)+(&FPRN*8)
&SATKD32 SETB  1
         AGO   .DONE
.SET64   ANOP
&SATKGRN SETA  &GRN
&SATKGFN SETA  &FPRN
&SATKGBK SETB  &BACK EQ 2
&SATKGSZ SETA  ((&GRN+&BACK)*8)+(&FPRN*8)
&SATKD64 SETB  1
.DONE    ANOP
.* Restore print settings
         AIF   (NOT &PRON).NOONR
         POP   PRINT
.NOONR   ANOP
         AIF   (NOT &PROFF).ENDMAC
         POP   PRINT,NOPRINT
.ENDMAC  MEND

         MACRO
&LABEL   FUNCTION &FP=NO,&AFP=NO
.* Defines a function entry
.* Required Parameter Usage:
.*    &LABEL   Assigns a location to the function entry.
         GBLA  &ARCHLVL  Current architecture level
.* Symbols provided by the ARCHIND macro
.*         GBLA  &ARCHASZ   Size of an address constant in bytes
         GBLB  &ARCHIND   Whether operator synonyms defined
.*         GBLC  &ARCHATP   Address constant type
.*         GBLC  &ARCHITP   Integer constant type
.* Global 32-bit register frame values supplied by FRAME macro
         GBLA  &SATKFFN  Number of floating point register save areas
         GBLA  &SATKFRN  Number of 32-bit general register save areas
         GBLA  &SATKFSZ  Stack frame size in bytes
         GBLB  &SATKD32  Whether 32-bit register STKF DSECT has been defined
         GBLB  &SATKFBK  Whether the backpointer is available or not.
.* Global 64-bit register frame values supplied by FRAME macro
         GBLA  &SATKGFN  Number of floating point register save areas
         GBLA  &SATKGRN  Number of 64-bit general register save areas
         GBLA  &SATKGSZ  Stack frame size in bytes
         GBLB  &SATKD64  Whether 64-bit register STKG DSECT has been defined
         GBLB  &SATKGBK  Whether the backpointer is used or not.
.* Symbols supplied by LOCAL macro
         GBLB  &SATKFLY  Whether the function is using the stack frame locally
         GBLC  &SATKFLC  CSECT in which local was initiated
         GBLC  &SATKFLL  Local stack frame ending symbol
.* Global symbols used to manage local stack frame usage supplied by FUNCTION
         GBLB  &SATKFAP  Whether additional floating point registers saved/restored
         GBLB  &SATKFFP  Whether traditional floating point registers saved/restored
         GBLB  &SATKFIF  Function definition active
.* Make sure we are not already in a function definition
         AIF   (NOT &SATKFIF).NOTFUN
         MNOTE 1,'FUNCTION - FUNCTION DEFINITION ALREADY ACTIVE - MACRO IGNORED'
         MEXIT
.NOTFUN  ANOP
.* Reset floating point save area requirements just in case
&SATKFAP SETB  0
&SATKFFP SETB  0
.* Reset local stack frame end just in case
&SATKFLL SETC  ''
.* Symbols used by this macro
         LCLA  &FPSA     Number of floating point save areas in the stack
         LCLB  &BACK     Back pointer being used
         LCLB  &PACK     Is PACK=YES in use by frame
         LCLB  &DOAFP    Save restore addtional floating point regs
         LCLB  &DOFP     Save restore traditional floating point regs
         LCLC  &PFX      Stack frame DSECT name
         LCLC  &STKEND   Symbol defining the end of the stack frame
.* Validate parameters
         AIF   ('&LABEL' NE '').GOODNAM
         MNOTE 1,'FUNCTION - REQUIRED LABEL PARAMETER MISSING'
         MEXIT
.GOODNAM ANOP
&DOFP    SETB  '&FP' EQ 'YES'
&DOAFP   SETB  '&AFP' EQ 'YES'
&DOFP    SETB  &DOFP OR &DOAFP
.* Make sure the FRAME has been defined for this type of CPU
         AIF   (&ARCHLVL EQ 9).CKSTKG
         AIF   (&SATKD32).FGOOD
         MNOTE 1,'FUNCTION - NEED FRAME MACRO IN ARCHLVL LESS THAN OR EQUAL TO 8'
         MEXIT
.FGOOD   ANOP
&PFX     SETC  'STKF'
&PACK    SETB  &SATKFRN NE 14
&FPSA    SETA  &SATKFFN
&BACK    SETB  &SATKFBK
         AGO   .FINLCL
.CKSTKG  ANOP
         AIF   (&SATKD64).GGOOD
         MNOTE 1,'FUNCTION - NEED FRAME MACRO IN ARCHLVL 9'
         MEXIT
.GGOOD   ANOP
&PFX     SETC  'STKG'
&PACK    SETB  &SATKGRN NE 14
&FPSA    SETA  &SATKGFN
&BACK    SETB  &SATKGBK
.* Finalize a previously started local stack definition
.FINLCL  ANOP
         AIF   (NOT &SATKFLY).NOLCLS
.* Local stack usage in effect, terminate the local definition
&PFX     DSECT
FUNS&SYSNDX  DS    0D      Make sure stack frame ends on double word
&STKEND  SETC  'FUNS&SYSNDX'
&SATKFLC CSECT
         AGO   .START
.NOLCLS  ANOP
&STKEND  SETC  '&PFX.LCL'
.* Generate the function prolog logic
.START   ANOP
         AIF   (&ARCHIND).GEN
         MNOTE 1,'FUNCTION - REQUIRED ARCHIND MACRO OPERATOR SYNONYMS UNDEFINED'
         MEXIT
.GEN     ANOP
&SATKFIF SETB  1      Function definition initiated (reset by RETURN macro)
&SATKFLL SETC  '&STKEND'
&LABEL   DS    0H     Define function entry point
         AIF   (&ARCHLVL GE 7).NOUSE1
         USING *,1       Temporarily use R1 to address pre-amble constants
.NOUSE1  ANOP
         USING &PFX,15   Address the stack frame
         AIF   (NOT &PACK).SAVEALL
.* Save only preserved registers on the stack
         $STM  6,15,&PFX.R6      Save restored registers on the stack
         AIF   ('&FP' NE 'YES').PUSH
         AGO   .FPSAVE
.* Save most registers on the stack
.SAVEALL ANOP
         $STM  2,15,&PFX.R2      Save most registers on the stack
         AIF   ('&FP' NE 'YES').PUSH
.* Save floating point
.FPSAVE  ANOP
         AIF   (&DOAFP AND &FPSA GE 10).SAVEAFP
         MNOTE 1,'FUNCTION - &PFX STACK FRAME CAN NOT SAVE ADDITIONAL FP REGISTERS'
&DOAFP   SETB  0
.SAVEAFP ANOP
         AIF   (&DOFP AND &FPSA GT 0).SAVEFP
         MNOTE 1,'FUNCTION - &PFX STACK FRAME CAN NOT SAVE FLOATING POINT REGISTERS'
&DOFP    SETB  0
         AGO   .BACKPTR
.SAVEFP  ANOP
         AIF   (NOT &DOAFP).NOAFP
         AIF   (&PACK).PAFP
         STD   1,&PFX.F1
         STD   3,&PFX.F3
         STD   5,&PFX.F5
         STD   7,&PFX.F7
.PAFP    ANOP
         STD   8,&PFX.F8
         STD   9,&PFX.F9
         STD   10,&PFX.F10
         STD   11,&PFX.F11
         STD   12,&PFX.F12
         STD   13,&PFX.F13
         STD   14,&PFX.F14
         STD   15,&PFX.F15
.NOAFP   ANOP
         AIF   (NOT &DOFP).BACKPTR
         AIF   (&PACK).PFP
         STD   0,&PFX.F0
         STD   2,&PFX.F2
.PFP     ANOP
         STD   4,&PFX.F4
         STD   6,&PFX.F6
.* Preserver back pointer in stack
.BACKPTR ANOP
         AIF   (NOT &BACK).PUSH
         $ST   15,&PFX.BACK
.NOBACK  ANOP
.* Create save area for my function calls and space for my locals on the stack 
.PUSH    ANOP
         AIF   (NOT &BACK).NOBACK
         AIF   (&ARCHLVL GE 7).USEIMED
         SL    15,FUNL&SYSNDX
         $BAS  13,FUNL&SYSNDX+4
         DROP  1                 Forget use of R1
         USING *,13              Establish function base register
FUNL&SYSNDX DC A(&STKEND-&PFX)
         AGO   .RESET
.USEIMED ANOP
         AHI   15,-(&STKEND-&PFX)
         AIF   (&ARCHLVL GE 7).NODROP1
.NODROP1 ANOP
.*         $BASR 13,0
.*         USING *,13
         $LR   13,1
         USING &LABEL,13
.* Reset local information
.RESET   ANOP
&SATKFLY SETB  0
&SATKFLC SETC  ''
         MEND

         MACRO
         LOCAL
.* Initiate local usage of a stack frame by the following function
         GBLA  &ARCHLVL
.* Symbols supplied by FRAME macro
         GBLB  &SATKD32  Whether 32-bit register STKF DSECT has been defined
         GBLB  &SATKD64  Whether 64-bit register STKG DSECT has been defined
.* Symbols supplied by FUNCTION macro
         GBLB  &SATKFIF  Function definition active
.* Symbols supplied by LOCAL macro
         GBLB  &SATKFLY  Whether the function is using the stack frame locally
         GBLC  &SATKFLC  CSECT in which local was initiated
.* Make sure we are not in a function already
         AIF   (NOT &SATKFIF).NOTFUN
         MNOTE 1,'LOCAL - CAN NOT DEFINE FUNCTION LOCAL FRAME USAGE IN A FUNCTION'
         MEXIT
.NOTFUN  ANOP
         LCLC  &PFX
         AIF   (&ARCHLVL EQ 9).CKSTKG
         AIF   (&SATKD32).FGOOD
         MNOTE 1,'LOCAL - NEED FRAME MACRO IN ARCHLVL LESS THAN OR EQUAL TO 8'
         MEXIT
.FGOOD   ANOP
&PFX     SETC  'STKF'
         AGO   .SAVSECT
.CKSTKG  ANOP
         AIF   (&SATKD64).GGOOD
         MNOTE 1,'LOCAL - NEED FRAME MACRO IN ARCHLVL 9'
         MEXIT
.GGOOD   ANOP
&PFX     SETC  'STKG'
.SAVSECT ANOP
&SATKFLC SETC  '&SYSECT'
&PFX     DSECT
         ORG   &PFX.LCL   Start function local stack frame usage
&SATKFLY SETB  1
         MEND

         MACRO
&LABEL   RETURN &RET
.* Returns to the caller of a function
.* Parameter Usage:
.*    &LABEL   Location label associated with the function return
.*    &RET     General register containing the returned value
         GBLA  &ARCHLVL
.* Symbols provided by the ARCHIND macro
.*         GBLA  &ARCHASZ   Size of an address constant in bytes
         GBLB  &ARCHIND   Whether operator synonyms defined
.*         GBLC  &ARCHATP   Address constant type
.*         GBLC  &ARCHITP   Integer constant type
.* Symbols supplied by FRAME macro
         GBLB  &SATKD32  Whether 32-bit register STKF DSECT has been defined
         GBLB  &SATKD64  Whether 64-bit register STKG DSECT has been defined
.* Symbols supplied by FUNCTION macro
         GBLB  &SATKFAP  Whether additional floating point registers saved/restored
         GBLB  &SATKFFP  Whether traditional floating point registers saved/restored
         GBLB  &SATKFIF  Function definition active
         GBLC  &SATKFLL  Local stack frame ending symbol
.* Make sure we are in a function
         AIF   (&SATKFIF).INFUN
         MNOTE 1,'RETURN - RETURN MACRO MAY ONLY BE USED WITHIN A FUNCTION DEFINITION'
         MEXIT
.INFUN   ANOP
.* Instruction used by the macro
         LCLC  &PFX     Stack frame DSECT
         AIF   (&ARCHLVL EQ 9).USEG
         AIF   (&SATKD32).FDEFN
         MNOTE 1,'RETURN - NEED FRAME MACRO IN ARCHLVL LESS THAN OR EQUAL TO 8'
.FDEFN   ANOP
&PFX     SETC  'STKF'
         AGO  .CKIND
.USEG    ANOP
         AIF   (&SATKD64).GDEFN
         MNOTE 1,'RETURN - NEED FRAME MACRO IN ARCHLVL 9'
         MEXIT
.GDEFN   ANOP
&PFX     SETC  'STKG'
.CKIND   ANOP
         AIF   (&ARCHIND).GEN
         MNOTE 1,'FUNCTION - REQUIRED ARCHIND MACRO OPERATOR SYNONYMS UNDEFINED'
         MEXIT
.GEN     ANOP
         AIF   ('&LABEL' EQ '').NOLBL
&LABEL   DS    0H
.NOLBL   ANOP
         AIF   (NOT &SATKFAP).NOAFP
         LD    8,&PFX.F8+(&SATKFLL-&PFX)
         LD    9,&PFX.F9+(&SATKFLL-&PFX)
         LD    10,&PFX.F10+(&SATKFLL-&PFX)
         LD    11,&PFX.F11+(&SATKFLL-&PFX)
         LD    12,&PFX.F12+(&SATKFLL-&PFX)
         LD    13,&PFX.F13+(&SATKFLL-&PFX)
         LD    14,&PFX.F14+(&SATKFLL-&PFX)
         LD    15,&PFX.F15+(&SATKFLL-&PFX)
&SATKFAP SETB  0
.NOAFP   ANOP
         AIF   (NOT &SATKFFP).NOFP
         LD    4,&PFX.F4+(&SATKFLL-&PFX)
         LD    6,&PFX.F6+(&SATKFLL-&PFX)
&SATKFFP SETB  0
.NOFP    ANOP
         AIF   ('&RET' EQ '').NORET
         $LR   2,&RET
.NORET   ANOP
         $LM   6,15,&PFX.R6+(&SATKFLL-&PFX)
         DROP  13,15
         BR    14
.* Reset function definition state and floating point save area usage.
&SATKFLL SETC  ''
&SATKFAP SETB  0
&SATKFFP SETB  0
&SATKFIF SETB  0    Reset function definition state, function definition completed.
         MEND

         MACRO
&LABEL   STACK &SIZE
.* Defines the initial bottom of the stack based upon the current CSECT, doubleword
.* aligned.  If the bottom of the stack needs to be placed in a different CSECT, that
.* CSECT needs to be the current active CSECT (and implied REGION) before issuing the
.* STACK macro.  Typically the STACK macro will be used near the end of the assembly.
.* Required Parameter Usage:
.*  &SIZE      The size of stack in bytes.  The size is specified by a self defining
.*             term.  The stack will not exceed the specified value by rounding down
.*             to the next lower number of double words.
         GBLA  &ARCHLVL   Current architecture level
.* Symbols supplied by FRAME macro
         GBLB  &SATKD32  Whether 32-bit register STKF DSECT has been defined
         GBLB  &SATKD64  Whether 64-bit register STKG DSECT has been defined
         LCLA  &SZ       Stack size as a symbolic variable
         LCLC  &PFX      Prefix for stack frame symbols
         AIF   ('&SIZE' NE '').SIZEOK
         MNOTE 1,'STACK - REQUIRED SIZE PARAMETER MISSING'
         MEXIT
.SIZEOK  ANOP
         AIF   (&ARCHLVL EQ 9).USEG
         AIF   (&SATKD32).FDEFN
         MNOTE 1,'STACK - NEED FRAME MACRO IN ARCHLVL LESS THAN OR EQUAL TO 8'
.FDEFN   ANOP
&PFX     SETC  'STKF'
         AGO   .GEN
.USEG    ANOP
         AIF   (&SATKD64).GDEFN
         MNOTE 1,'STACK - NEED FRAME MACRO IN ARCHLVL 9'
         MEXIT
.GDEFN   ANOP
&PFX     SETC  'STKG'
.GEN     ANOP
.* &BASE    SETC  '&TOP'
&SZ      SETA  &SIZE
&SZ      SETA  (&SZ/8)*8
.* The stack is allocated from high to low addresses.  
         DS    0D
&LABEL   EQU   *+&SZ-(&PFX.LCL-&PFX)    Defines the initial _bottom_ of the stack
         MEND

         MACRO
&LABEL   STKINIT &BOTTOM,&LOAD=NO,&RELO=NO
.* Initializes the program stack.  Required before any functions may be called.
.* Required Parameter Usage:
.*  &BOTTOM   Identifies the source of the stack bottom address.  If enclosed in
.*            parenthesis it identifies the register containing the bottom address.
.*            If not enclosed in parenthesis, identifies the symbol associated with
.*            the stack bottom.  The symbol defined by the STACK macro is suitable.
.* Optional Parameter Usage:
.*  &LOAD     Specify 'YES' to use the &BOTTOM as a symbol for an address constant.
.*            Otherwise &BOTTOM is the actual symbol for the bottom of the stack and
.*            an inline address constant will be used.  Defaults to 'NO'.
.*  &RELO     Specify 'YES' to make the inline bottom of stack address constant
.*            self relocatable.  Defaults to 'NO'.
         GBLA  &ARCHLVL   Current architecture level
.* Symbols provided by the ARCHIND macro
         GBLA  &ARCHASZ   Size of an address constant in bytes
         GBLB  &ARCHIND   Whether operator synonyms defined
         GBLC  &ARCHATP   Address constant type
.*         GBLC  &ARCHITP   Integer constant type
         LCLA  &NBOTTOM
         LCLC  &REG
&NBOTTOM SETA  N'&BOTTOM
         AIF   ('&BOTTOM' NE '').BOTOK
         MNOTE 1,'STKINIT - REQUIRED BOTTOM PARAMETER MISSING'
.BOTOK   ANOP
         AIF   (&ARCHIND).GEN
         MNOTE 1,'STKINIT - REQUIRED ARCHIND MACRO OPERATOR SYNONYMS UNDEFINED'
         MEXIT
.GEN     ANOP
         AIF   (&NBOTTOM EQ 1).USEREG
         AIF   (&NBOTTOM EQ 0).USEADDR
         MNOTE 1,'STKINIT - BOTTOM PARAMETER MAY NOT BE A SUBLIST'
         MEXIT
.USEREG  ANOP
&REG     SETC  '&BOTTOM(1)'
&LABEL   $LR   15,&REG        Initialize program stack pointer
         MEXIT
.USEADDR ANOP
         AIF   ('&LOAD' NE 'YES').INLINE
&LABEL   $L    15,&BOTTOM     Initialize program stack pointer
         MEXIT
.INLINE  ANOP
&LABEL   $L    15,STKI&SYSNDX Initialize program stack pointer
         $B    STKI&SYSNDX+&ARCHASZ  Branch around bottom of stack address
         AIF   ('RELO' EQ 'YES').RELAD
STKI&SYSNDX DC    &ARCHATP.(&BOTTOM) Bottom of stack
         MEXIT
.RELAD   ANOP
STKI&SYSNDX RELOA &BOTTOM            Bottom of stack
         MEND

         MACRO
&LABEL   ACALL  &FUNC,&INLINE=,&RELO=NO
         GBLC  &A      Architecture specific symbol suffix
&LABEL   CALL  &FUNC&A,INLINE=&INLINE,RELO=&RELO
         MEND
         
         MACRO
&LABEL   ICALL &FUNC,&INLINE=,&RELO=NO
         GBLC  &I      Input/output architecture specific symbol suffix
&LABEL   CALL  &FUNC&I,INLINE=&INLINE,RELO=&RELO
         MEND
         
         MACRO
&LABEL   SCALL &FUNC,&INLINE=,&RELO=NO
         GBLC  &S      Sharable symbol suffix
&LABEL   CALL  &FUNC&S,INLINE=&INLINE,RELO=&RELO
         MEND

         MACRO
&LABEL   AFUN  &FP=NO,&AFP=NO
         GBLC  &A      Architecture specific symbol suffix
         LCLC  &LBL    Used to constuct function label
&LBL     SETC  '&LABEL&A'
&LBL     FUNCTION FP=&FP,AFP=&AFP
         MEND

         MACRO
&LABEL   IFUN  &FP=NO,&AFP=NO
         GBLC  &I      Input/output architecture specific symbol suffix
         LCLC  &LBL    Used to constuct function label
&LBL     SETC  '&LABEL&I'
&LBL     FUNCTION FP=&FP,AFP=&AFP
         MEND

         MACRO
&LABEL   SFUN  &FP=NO,&AFP=NO
         GBLC  &S      Sharable symbol suffix
         LCLC  &LBL    Used to constuct function label
&LBL     SETC  '&LABEL&S'
&LBL     FUNCTION FP=&FP,AFP=&AFP
         MEND
